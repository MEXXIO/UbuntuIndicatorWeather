
#! /bin/sh
""":"
exec python $0 ${1+"$@"}
"""

# This file is part of indicator-weather.
# Indicator Weather is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# Indicator Weather is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.  <http://www.gnu.org/licenses/>
#
# Author(s):
# (C) 2015 Kasra Madadipouya <kasra@madadipouya.com>

import sys
import urllib
import json
import gi
from preference import Dialog
from configuration import Configuration
from gi.repository import Gtk, GLib
gi.require_version('Gtk', '3.0')
gi.require_version('AppIndicator3', '0.1')
from gi.repository import AppIndicator3 as appIndicator

PING_FREQUENCY_IN_SECONDS = 600 # 10 minutes

ICON_NAMES = {
    "01d": "weather-clear",
    "01n": "weather-clear-night",
    "02d": "weather-few-clouds",
    "02n": "weather-few-clouds-night",
    "03d": "weather-clouds",
    "03n": "weather-clouds-night",
    "04d": "weather-overcast",
    "09d": "weather-showers",
    "10d": "weather-showers-scattered",
    "11d": "weather-storm",
    "13d": "weather-snow",
    "50d": "weather-fog",
}

def get_local_icon_name(code):
    if code in ICON_NAMES:
        return ICON_NAMES[code]
    else:
        day_code = code[:2] + 'd'
    return ICON_NAMES[day_code]

class WeatherIndicator:
   
    def __init__(self):
        self.configuration = Configuration()
        self.indicator = appIndicator.Indicator.new(
            "weather-indicator", "weather-indicator", appIndicator.IndicatorCategory.OTHER)
        self.indicator.set_status(appIndicator.IndicatorStatus.ACTIVE)
        self.indicator.set_icon("weather-clear")
        self.menu_setup()
        self.indicator.set_menu(self.menu)

    def menu_setup(self):
        self.menu = Gtk.Menu()
        self.temperature_item = Gtk.MenuItem("")
        self.temperature_item.show()
        self.menu.append(self.temperature_item)
        self.menu.append(self.create_separator_menu_item())
        # Weather Condition
        self.weather_condition_item = Gtk.MenuItem("")
        self.weather_condition_item.show()
        self.menu.append(self.weather_condition_item)
        # Humidity
        self.humidity_item = Gtk.MenuItem("")
        self.humidity_item.show()
        self.menu.append(self.humidity_item)
        # Wind
        self.wind_item = Gtk.MenuItem("")
        self.wind_item.show()
        self.menu.append(self.wind_item)
        # Cloudiness
        self.cloudiness_item = Gtk.MenuItem("")
        self.cloudiness_item.show()
        self.menu.append(self.cloudiness_item)
        # Pressure
        self.pressure_item = Gtk.MenuItem("")
        self.pressure_item.show()
        self.menu.append(self.pressure_item)
        # Visibility
        self.visibility_item = Gtk.MenuItem("")
        self.visibility_item.show()
        self.menu.append(self.visibility_item)

        self.menu.append(self.create_separator_menu_item())
        self.preference_item = Gtk.MenuItem("Preferences")
        self.preference_item.connect("activate", self.preference)
        self.preference_item.show()
        self.menu.append(self.preference_item)
        self.quit_item = Gtk.MenuItem("Quit")
        self.quit_item.connect("activate", self.quit)
        self.quit_item.show()
        self.menu.append(self.quit_item)
    
    def main(self):
        self.get_weather()
        GLib.timeout_add_seconds(PING_FREQUENCY_IN_SECONDS, self.get_weather)
        Gtk.main()

    def quit(self, widget):
        sys.exit(0)


    def preference(self, widget):
        preference_dialog = Dialog()
        preference_dialog.main()
        self.configuration.reload_configuration()
        self.get_weather()

    def create_separator_menu_item(self):
        separator = Gtk.SeparatorMenuItem()
        separator.show()
        return separator



    def get_weather(self):
        try:
            if(self.configuration.get_temperature_scale()):
                temperature_scale = 'true'
                temperature_symbol = u'\u2109'
            else:
                temperature_scale = 'false'
                temperature_symbol = u'\u2103'

            if(self.configuration.is_automatic_location_detection()):
                url_path = ('currentbyip?fahrenheit={}'.format(temperature_scale))
            else:
                latitude, longitude = self.configuration.get_coordinates()
                url_path = ('current?lat={}&lon={}&fahrenheit={}'.format(latitude, longitude, temperature_scale))
                
            weather_service_url = ('http://weather-api.madadipouya.com/v1/weather/{}'.format(url_path))
            json_response = json.loads(urllib.urlopen(weather_service_url).read())
            temperature = json_response['temperature']
            if(self.configuration.is_round_temperature()):
                temperature = int(round(float(temperature)))
            location = json_response['geoLocation']
            icon_code = json_response['iconName']
            icon_name = get_local_icon_name(icon_code)
            city = self.get_city_name(location.strip().rsplit(",")[:2])
            if(self.configuration.is_hide_location()):
                label = u'{temperature}{temperature_symbol}'.format(**locals())
            else:
                label = u'{temperature}{temperature_symbol} {city}'.format(**locals())
            self.indicator.set_label(label, label)
            self.indicator.set_icon(icon_name)
            self.temperature_item.get_child().set_text(u'{temperature}{temperature_symbol} {city}'.format(**locals()))
            self.set_weather_metrics(json_response)

        finally:
            return True # Make sure timer loop continues

    def set_weather_metrics(self, json_response):
        self.weather_condition_item.set_label(json_response['weather'][0]['main'])
        humidity = 'Humidity: {}%'.format(json_response['main']['humidity'])
        self.humidity_item.set_label(humidity)
        if(self.configuration.get_temperature_scale()):
            wind_speed = json_response['wind']['speed']
            wind_speed_unit = "mph"
        else:
            wind_speed = self.convert_to_km_h(json_response['wind']['speed'])
            wind_speed_unit = "km/h"
        wind  = 'Wind: {wind_speed} {wind_speed_unit}'.format(**locals())
        self.wind_item.set_label(wind)
        cloudiness = 'Cloudiness: {}%'.format(json_response['clouds']['all'])
        self.cloudiness_item.set_label(cloudiness)
        pressure = "Pressure: {} hPa".format(json_response['main']['pressure'])
        self.pressure_item.set_label(pressure)
        visibility = "Visibility: {} meter".format(json_response['visibility'])
        self.visibility_item.set_label(visibility)
        
    def convert_to_km_h(self, wind_speed):
        return wind_speed * 18 / 5

    def get_city_name(self, location):
        try:    # If location[0] is number, then we will show location[1], which is street
            city = int(location[0])
            return location[1]
        except:
            return location[0]

if __name__ == "__main__":
    indicator = WeatherIndicator()
    indicator.main()
